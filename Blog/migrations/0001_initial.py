# Generated by Django 4.2.4 on 2023-08-08 06:13

import Blog.models
import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('taggit', '0005_auto_20220424_2025'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hash_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('date', models.DateTimeField(default=datetime.datetime.now)),
                ('is_active', models.BooleanField(default=True)),
                ('note', models.TextField(blank=True, null=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='Blog.category')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hash_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('slug', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('created_date', models.DateTimeField(default=datetime.datetime.now)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('Public', 'Public'), ('Draft', 'Draft')], default='Public', max_length=255)),
                ('note', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Series',
            },
        ),
        migrations.CreateModel(
            name='AuthorUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('hash_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('profile_photo', models.ImageField(blank=True, null=True, upload_to=Blog.models.author_profile)),
                ('bio', models.TextField(blank=True, max_length=255, null=True)),
                ('rank', models.CharField(choices=[('Contributor', 'Contributor'), ('Author', 'Author'), ('Moderator', 'Moderator'), ('Admin', 'Admin'), ('Banned', 'Banned')], default='Contributor', max_length=255)),
                ('dob', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Non-Binary', 'Non-Binary')], default='', max_length=10)),
                ('facebook_profile', models.SlugField(blank=True, default='')),
                ('twitter_profile', models.SlugField(blank=True, default='')),
                ('github_profile', models.SlugField(blank=True, default='')),
                ('website_url', models.URLField(blank=True, default='')),
                ('country', models.CharField(blank=True, default='', max_length=255)),
                ('city', models.CharField(blank=True, default='', max_length=255)),
                ('phone', models.CharField(blank=True, default='', max_length=25)),
                ('is_deleted', models.BooleanField(default=False)),
                ('note', models.TextField(blank=True, null=True)),
                ('follower', models.ManyToManyField(blank=True, related_name='user_following', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('mute_list', models.ManyToManyField(blank=True, related_name='muted', to=settings.AUTH_USER_MODEL)),
                ('series', models.ManyToManyField(blank=True, related_name='user_series', to='Blog.series')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ('-date_joined',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hash_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('date', models.DateTimeField(default=datetime.datetime.now)),
                ('review_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('Accepted', 'Accepted'), ('Pending', 'Pending'), ('Rejected', 'Rejected')], default='Pending', max_length=255)),
                ('type', models.CharField(choices=[('Author', 'Author'), ('Other', 'Other'), ('Request', 'Request')], default='Other', max_length=255)),
                ('note', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_request', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='series',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='series_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ReportContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hash_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('type', models.CharField(choices=[('Comment', 'Comment'), ('User', 'User'), ('Post', 'Post'), ('Other', 'Other')], default='Other', max_length=255)),
                ('content_id', models.PositiveIntegerField()),
                ('report_content', models.TextField()),
                ('date', models.DateTimeField(default=datetime.datetime.now)),
                ('status', models.CharField(choices=[('Solved', 'Solved'), ('Pending', 'Pending'), ('Rejected', 'Rejected')], default='Pending', max_length=255)),
                ('note', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('report_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_report', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hash_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('slug', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('cover_photo', models.ImageField(blank=True, default='blog/post_cover/cover.jpg', upload_to=Blog.models.post_cover)),
                ('content', models.TextField()),
                ('date', models.DateTimeField(default=datetime.datetime.now)),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now)),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('Published', 'Published'), ('Hot', 'Hot'), ('Rejected', 'Rejected'), ('Pending', 'Pending')], max_length=255)),
                ('is_deleted', models.BooleanField(default=False)),
                ('note', models.TextField(blank=True, null=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_post', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='category_post', to='Blog.category')),
                ('series', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='post_in_series', to='Blog.series')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hash_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('type', models.CharField(choices=[('Like', 'Like'), ('Comment', 'Comment'), ('Follow', 'Follow'), ('Update', 'Update'), ('Notice', 'Notice')], default=None, max_length=255)),
                ('content_id', models.PositiveIntegerField()),
                ('content', models.TextField(blank=True, null=True)),
                ('date', models.DateTimeField(default=datetime.datetime.now)),
                ('read_time', models.DateTimeField(blank=True, null=True)),
                ('note', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_notification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hash_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('content', models.TextField()),
                ('date', models.DateTimeField(default=datetime.datetime.now)),
                ('status', models.CharField(blank=True, choices=[('Published', 'Published'), ('Rejected', 'Rejected'), ('Pending', 'Pending')], default='Published', max_length=255, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('note', models.TextField(blank=True, null=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('commenter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_comment', to=settings.AUTH_USER_MODEL)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='Blog.comment')),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='post_comment', to='Blog.post')),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
    ]
